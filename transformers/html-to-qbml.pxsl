<<<?xml version="1.0" encoding="UTF-8" ?>>>

stylesheet -version=1.0 -xmlns:xsl=http://www.w3.org/1999/XSL/Transform
  output -method=xml -indent=no -encoding=UTF-8
  preserve-space *

  template html
    param packet <<Packet >>
    param by <<by >>
    qpdb -version=0.2
      tournaments
        # TODO: Take this hardcoding out of the stylesheet; also UTF-8 does not work
        tournament \
          -id=1 -name=SUBMIT -year=2014 -date=<<February 1, 2014>> -location=<<University of Maryland>> \
          -summary=<<SUBMIT 2014: &#x201c;sometimes referred to as Groper[citation needed]&#x201d;>> \
          -subtitle=<<&#x201c;sometimes referred to as Groper[citation needed]&#x201d;>>
          packets
            variable packet-name
              choose
                when contains(p[2],'Editors')
                  text <<Editors >>
                  value-of substring-after(p[2],$packet)
                otherwise
                  value-of substring-after(p[2],$by)
            packet -name={$packet-name} -authors={substring-after(p[3],$by)}
              tossups
                apply-templates p[text()='Tossups']
              boni
                apply-templates p[text()='Bonuses']

  template p[text()='Tossups']
    for-each -select=<<following-sibling::p[(preceding-sibling::p[1])[br] and following-sibling::p[text()='Bonuses']]>>
      tossup -id={substring-before(text(),'.')}
        question
          call-template strip
            with-param p .
            with-param s <<. >>
        answer
          call-template strip-answer
            with-param p following-sibling::p[1]

  template p[text()='Bonuses']
    for-each following-sibling::p[(preceding-sibling::p[1])[br]]
      bonus -id={substring-before(text(),'.')}
        variable cur generate-id(preceding::br[1])
        stem
          call-template strip
            with-param p .
            with-param s <<. >>
        for-each -select=<<following-sibling::p[generate-id(preceding::br[1]) = $cur and starts-with(text(), '[10]')]>>
          part -value=10
            question
              call-template strip
                with-param p .
                with-param s <<[10] >>
            answer
              call-template strip-answer
                with-param p following-sibling::p[1]

  template -name=strip
    param p
    param s
    variable temp
      apply-templates $p/text()[1]
    value-of substring-after($temp,$s)
    apply-templates $p/*|$p/text()[not(position()=1)]

  template -name=strip-answer
    # Sometimes a typo like "ANWER: " or "ANSWER " will cause substring-after to fail, but you may be lucky enough
    # that the actual answer starts with a tag (instead of more text) that it cancels out.
    param p
    call-template strip
      with-param p $p
      with-param s <<ANSWER: >>

  template p
    apply-templates

  template strong
    req
      apply-templates

  template em
    title
      apply-templates

  template sup
    sup
      apply-templates

  template sub
    sub
      apply-templates
