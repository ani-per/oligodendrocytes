<<<?xml version="1.0" encoding="UTF-8" ?>>>

# The expected format of the HTML document is basically this, where every line is contained in a <p>,
# and empty lines are just <p><br /></p>.
#
#   Tournament name and year: Subtitle (TODO)
#   Packet by <Packet name>
#   Questions/Edited by <Authors>
#
#   Tossups
#
#   1. Blah blah.
#   ANSWER: Blah blah.
#
#   Bonuses
#
#   1. Blah blah.
#   [10] Blah blah.
#   ANSWER: Blah blah.
#   [10] Blah blah.
#   ANSWER: Blah blah.
#   [10] Blah blah.
#   ANSWER: Blah blah.
#
# Notice that the components of tossups and bonuses are determined by their position relative to the
# preceding <p><br /></p>.
#
# TODO: Wrap all substring-after() with if starts-with() 

,strip el str =
  call-template strip
    with-param p <(,el)>
    with-param s <(,str)>

,tag source result =
  template <(,source)>
    element <(,result)>
      apply-templates

stylesheet -version=1.0 -xmlns:xsl=http://www.w3.org/1999/XSL/Transform
  output -method=xml -indent=no -encoding=UTF-8
  preserve-space *

  include ../tournaments/_cache/metadata.xsl

  param list-punct <<. >>
  param answer-prefix <<ANSWER: >>
  param bonus-prefix <<[10] >>
  param editors-prefix <<>>
  param packet-name-other <<>>
  param packet-name-editors <<>>
  param authors-other <<>>
  param authors-editors <<>>
  param href-pron-prefix <<http://pron.>>
  param byline-prefix <{<}>
  param byline-suffix <{>}>
  param byline-infix <(<<' '>>)>

  template html
    qpdb -version=0.2
      tournaments
        # TODO: Take this hardcoding out of the stylesheet; also UTF-8 does not work
        tournament
          call-template tournament-metadata
          packets
            packet
              call-template packet-metadata
              variable bonuses p[text()='Bonuses']

              tossups
                apply-templates p[text()='Tossups']
              if $bonuses
                boni
                  apply-templates p[text()='Bonuses']

  template -name=packet-metadata
    variable editors contains(p[2],'Editors')
    variable packet-name
      choose
        when $editors
          value-of $editors-prefix
          value-of substring-after(p[2],$packet-name-editors)
        otherwise
          value-of substring-after(p[2],$packet-name-other)
    variable authors
      choose
        when $editors
          value-of substring-after(p[3],$authors-editors)
        otherwise
          value-of substring-after(p[3],$authors-other)

    attribute name
      value-of $packet-name
    attribute authors
      value-of $authors

  template p[text()='Tossups']
    variable ps following-sibling::p
    for-each <(<<$ps[(preceding-sibling::p[1])[br] and (following-sibling::p[text()='Bonuses'] or not($ps[text()='Bonuses']))]>>)>
      tossup -id={substring-before(text(),$list-punct)}
        variable byline substring-before(substring-after(following-sibling::p[2],$byline-prefix),$byline-suffix)
        variable author substring-before($byline,$byline-infix)
        variable category substring-after($byline,$byline-infix)

        attribute category
          value-of $category
        attribute author
          value-of $author

        question
          ,strip . $list-punct
        answer
          call-template strip-answer
            with-param p following-sibling::p[1]

  template p[text()='Bonuses']
    for-each <(<<following-sibling::p[(preceding-sibling::p[1])[br and not(normalize-space(text()))]]>>)>
      bonus -id={substring-before(text(),$list-punct)}
        variable cur generate-id(preceding::br[ancestor::p[1][not(normalize-space(text()))]][1])

        variable byline substring-before(substring-after(following-sibling::p[7],$byline-prefix),$byline-suffix)
        variable author substring-before($byline,$byline-infix)
        variable category substring-after($byline,$byline-infix)

        attribute category
          value-of $category
        attribute author
          value-of $author

        stem
          ,strip . $list-punct
        for-each <(<<following-sibling::p[generate-id(preceding::br[ancestor::p[1][not(normalize-space(text()))]][1]) = $cur and starts-with(text(), '[10]')]>>)>
          part -value=10
            question
              ,strip . $bonus-prefix
            answer
              call-template strip-answer
                with-param p following-sibling::p[1]

  template -name=strip
    param p
    param s
    variable temp
      apply-templates $p/text()[1]
    value-of substring-after($temp,$s)
    apply-templates $p/*|$p/text()[not(position()=1)]

  template -name=strip-answer
    # Sometimes a typo like "ANWER: " or "ANSWER " will cause substring-after to fail, but you may be lucky enough
    # that the actual answer starts with a tag (instead of more text) that it cancels out.
    param p
    ,strip $p $answer-prefix

  template p
    apply-templates

  ,tag strong req
  ,tag em title
  ,tag sup sup
  ,tag sub sub
  ,tag br br

  # While xslt 2.0 allows params in match attributes, we still need 1.0 so that includes can override top-level params.
  # Therefore we need to use a choose here.
  template a
    pron
      graph
        apply-templates
      phon
        choose
          when starts-with(@href,$href-pron-prefix)
            value-of substring-after(@href,$href-pron-prefix)
          otherwise
            value-of @href
